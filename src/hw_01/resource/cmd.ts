export const CMD_DEFINITION = {
	add: {
		decription: '–î–æ–¥–∞—î –∑–∞–ø–∏—Å –ø—Ä–æ –∑–≤–∏—á–∫—É',
		options: {
			name: {
				type: 'string',
				description: '–ù–∞–∑–≤–∞ –∑–≤–∏—á–∫–∏ –∞–±–æ –Ω–µ–≤–µ–ª–∏—á–∫–∏–π –æ–ø–∏—Å',
				required: true,
			},
			freq: {
				type: ['daily', 'monthly', 'weekly'] as string[],
				description: '–ü–µ—Ä—ñ–æ–¥–∏—á–Ω—ñ—Ç—å –∑–≤–∏—á–∫–∏',
				required: true,
			},
		},
	},
	list: {
		decription: '–ü–æ–∫–∞–∑—É—î –≤—Å—ñ –∑–≤–∏—á–∫–∏ —É –≤–∏–≥–ª—è–¥—ñ —Ç–∞–±–ª–∏—Ü—ñ. –ó–∞ –∑–∞–º–æ–≤—á–µ–Ω—è–º –ø–æ–∫–∞–∑—É—î —Å–ø–∏—Å–æ–∫ –±–µ–∑ —É—Ä–∞—Ö—É–≤–∞–Ω–Ω—è "soft deleted" –∑–≤–∏—á–æ–∫',
		options: {
			all: {
				type: 'boolean',
				description: '–î–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É –¥–æ–¥–∞—î –∑–≤–∏—á–∫–∏, —è–∫—ñ –±—É–ª–∏ –ø–æ–∑–Ω–∞—á–µ–Ω—ñ —è–∫ "soft deleted"',
				required: false,
			},
		},
	},
	done: {
		decription: '–í—ñ–¥–º—ñ—á–∞—î, —â–æ –∑–≤–∏—á–∫—É –≤–∏–∫–æ–Ω–∞–Ω–æ —Å—å–æ–≥–æ–¥–Ω—ñ',
		options: {
			id: {
				type: 'string',
				description: 'ID –∑–≤–∏—á–∫–∏, —è–∫—ñ —Ç—Ä–µ–±–∞ –ø–æ–∑–Ω–∞—á–∏—Ç–∏, —è–∫ –≤–∏–∫–æ–Ω–∞–Ω—É',
				required: true,
			},
		},
	},
	stats: {
		decription: '–î—Ä—É–∫—É—î –¥–ª—è –∫–æ–∂–Ω–æ—ó –∑–≤–∏—á–∫–∏ –≤—ñ–¥—Å–æ—Ç–æ–∫ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∑–∞ –æ—Å—Ç–∞–Ω–Ω—ñ 7(30) –¥–Ω—ñ–≤',
		options: {
			gte: {
				type: 'string',
				description:
					'–§—ñ–ª—å—Ç—Ä—É—î –∑–∞ –ø—Ä–æ–≥—Ä–µ—Å–æ–º (%) –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∑–≤–∏—á–∫–∏. –ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π - 0, –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∏–π - 100. –ú–æ–∂–Ω–∞ –∫–æ–º–±—ñ–Ω—É–≤–∞—Ç–∏ –∑ —Ñ–ª–∞–≥–æ–º --lte . –ù–∞–ø—Ä–∏–∫–ª–∞–¥, --gte 30 --lte 50',
				required: false,
			},
			lte: {
				type: 'string',
				description:
					'–§—ñ–ª—å—Ç—Ä—É—î –∑–∞ –ø—Ä–æ–≥—Ä–µ—Å–æ–º (%) –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∑–≤–∏—á–∫–∏. –ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π - 0, –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∏–π - 100. –ú–æ–∂–Ω–∞ –∫–æ–º–±—ñ–Ω—É–≤–∞—Ç–∏ –∑ —Ñ–ª–∞–≥–æ–º --gte . –ù–∞–ø—Ä–∏–∫–ª–∞–¥, --gte 10 --lte 90',
				required: false,
			},
			eq: {
				type: 'string',
				description: '–§—ñ–ª—å—Ç—Ä—É—î –∑–∞ –ø—Ä–æ–≥—Ä–µ—Å–æ–º (%) –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∑–≤–∏—á–∫–∏. –ù–∞–ø—Ä–∏–∫–ª–∞–¥, --eq 50',
				required: false,
			},
			range: {
				type: ['week', 'month'] as string[],
				description: '–ó–∞–¥–∞—î –ø–µ—Ä—ñ–æ–¥ –¥–ª—è —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó. –ó–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º —Å—Ç–æ—ó—Ç—å –ø–µ—Ä—ñ–æ–¥ –≤ 7 –¥–Ω—ñ–≤',
				required: false,
			},
		},
	},
	delete: {
		decription: '–í–∏–¥–∞–ª—è—î –∑–≤–∏—á–∫—É. –Ñ –¥–≤–∞ —Ä–µ–∂–∏–º–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è: --soft —Ç–∞ --hard. –ó–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è soft-–≤–∏–¥–∞–ª–µ–Ω–Ω—è',
		options: {
			id: {
				type: 'string',
				description: 'ID –∑–≤–∏—á–∫–∏, —è–∫—ñ —Ç—Ä–µ–±–∞ –≤–∏–¥–∞–ª–∏—Ç–∏',
				required: true,
			},
			soft: {
				type: 'boolean',
				description: '–ü–æ–∑–Ω–∞—á–∞—î –∑–≤–∏—á–∫—É, —è–∫ –≤–∏–¥–∞–ª–µ–Ω—É, –∞–ª–µ –∑–∞–ª–∏—à–∞—î –∑–∞–ø–∏—Å –ø—Ä–æ –Ω–µ—ó',
				required: false,
			},
			hard: {
				type: 'boolean',
				description: '–í–∏–¥–∞–ª—è—î –∑–∞–ø–∏—Å –±–µ–∑–ø–æ–≤–æ—Ä–æ—Ç–Ω—å–æ',
				required: false,
			},
		},
	},
	update: {
		decription: '–ú–æ–¥–∏—Ñ—ñ–∫—É—î –∑–∞–ø–∏—Å –ø—Ä–æ –∑–≤–∏—á–∫—É. –ó–º–Ω—ñ–∏ –º–æ–∂—É—Ç—å –±—É—Ç–∏ —á–∞—Å—Ç–∫–æ–≤–∏–º–∏. –ù–∞–ø—Ä–∏–∫–ª–∞–¥, –Ω–∞–∑–≤ —Ç–∞/–∞–±–æ —Ä–µ–≥—É–ª—è—Ä–Ω—ñ—Å—Ç—å',
		options: {
			id: {
				type: 'string',
				description: 'ID –∑–≤–∏—á–∫–∏, —è–∫—ñ —Ç—Ä–µ–±–∞ –∑–º—ñ–Ω–∏—Ç–∏',
				required: true,
			},
			name: {
				type: 'string',
				description: '–ù–∞–∑–≤–∞ –∑–≤–∏—á–∫–∏ –∞–±–æ –Ω–µ–≤–µ–ª–∏—á–∫–∏–π –æ–ø–∏—Å',
				required: false,
			},
			freq: {
				type: ['daily', 'monthly', 'weekly'] as string[],
				description: '–ü–µ—Ä—ñ–æ–¥–∏—á–Ω—ñ—Ç—å –∑–≤–∏—á–∫–∏',
				required: false,
			},
		},
	},
} as const;

export type CMD = keyof typeof CMD_DEFINITION;
export const commands = Object.keys(CMD_DEFINITION);
export function printHelpText(width = 80) {
	const indent = 2;

	const pad = (n: number) => ' '.repeat(n);

	const formatSection = (entries: Record<string, string>, leftPad: number = indent, colWidth: number = 20) => {
		const result: string[] = [];

		for (const [key, desc] of Object.entries(entries)) {
			const left = pad(leftPad) + key.padEnd(colWidth);
			const rightWidth = width - left.length;
			const words = desc.split(' ');
			let line = '';
			let i = 0;

			while (i < words.length) {
				if ((line + words[i]).length > rightWidth) {
					result.push(left + line.trim());
					line = '';
					break;
				}
				line += words[i++] + ' ';
			}

			if (line.trim()) result.push(left + line.trim());

			let remLine = '';
			while (i < words.length) {
				if ((remLine + words[i]).length > width - (leftPad + colWidth)) {
					result.push(pad(leftPad + colWidth) + remLine.trim());
					remLine = '';
				}
				remLine += words[i++] + ' ';
			}
			if (remLine.trim()) {
				result.push(pad(leftPad + colWidth) + remLine.trim());
			}
		}

		return result.join('\n');
	};

	console.log('\n–ó–∞–≥–∞–ª—å–Ω–∞ –∫–æ–º–∞–Ω–¥–∞:\n  pnpm run start <command> [options]');
	console.log('\n–î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:');

	const commandDescriptions: Record<string, string> = {};
	for (const [cmd, meta] of Object.entries(CMD_DEFINITION)) {
		commandDescriptions[cmd] = meta.decription || '';
	}
	console.log(formatSection(commandDescriptions));

	for (const [cmd, meta] of Object.entries(CMD_DEFINITION)) {
		console.log(`\nüîπ ${cmd}`);
		if (Object.keys(meta.options).length > 0) {
			const opts: Record<string, string> = {};
			for (const [opt, optMeta] of Object.entries(meta.options)) {
				const typeStr = Array.isArray(optMeta.type)
					? `<${optMeta.type.join(' | ')}> `
					: optMeta.type === 'boolean'
					? ''
					: `<${optMeta.type}>`;
				opts[`--${opt}` + (typeStr ? ` ${typeStr}` : '')] = optMeta.description;
			}
			console.log(formatSection(opts, indent + 2));
		} else {
			console.log(pad(indent + 2) + '(–±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤)');
		}
	}
}

export const isHelpFlag = (cmd: string) => cmd === '--help';
